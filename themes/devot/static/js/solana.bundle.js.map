{"version":3,"file":"solana.bundle.js","mappings":"w+CAAA,IAuCIA,EAvCJ,UAyCMC,EAAiBC,SAASC,eAC5B,mBAGEC,EAAiBC,OAwBjBC,GAAU,IAAAC,eAAc,UAExBC,EAAa,IAAI,EAAAC,WAAWH,GAqBlCL,EAAeS,iBAAiB,SAAS,qD,4DACrC,SA9CsB,mC,kDAElB,O,sBAAA,GAAMN,EAAUO,OAAOC,W,oEA4C3B,S,iBAGwB,O,sBAAA,GAvBM,mC,4DAa1B,OAZEC,EAAK,IAAI,EAAAC,UAAU,iDAEnBC,GAAc,IAAI,EAAAC,aAAcC,IAClC,EAAAC,cAAcC,SAAS,CACnBC,WAAYpB,EAASqB,UACrBC,SAAUT,EACVU,SAAU,MAAS,EAAAC,qBAIfC,SAAWzB,EAASqB,UAChC,EAAAN,EACI,GAAMP,EAAWkB,sB,OAGrB,OAJA,EAAYC,gBACR,SACFC,UAEK,CAAP,EAAOb,W,OASH,OAFMA,EAAc,UAML,GAAMf,EAAS6B,gBAAgBd,IAH1C,I,OAIc,OADZe,EAAS,SACG,GAAMtB,EAAWuB,mBAC/BD,EAAOE,c,OAEX,OAHMC,EAAY,SAGlB,GAAMzB,EAAW0B,mBAAmBD,I,cAApC,S,8DAMR5B,OAAO8B,OAAS,WAzDI,mC,mCAChB,MAAI,WAAY9B,SACN,EAAiBA,QACjB,EAAW,EAAUM,QAEdyB,WACF,CAAP,EAAO,IAIfnC,EAAeoC,UAAW,EAC1B,WAgDKC,MAAK,SAACC,GACHvC,EAAWuC,KAET,OAAC,iB","sources":["webpack:///./src/js/solana.ts"],"sourcesContent":["import {\n    Connection,\n    PublicKey,\n    Transaction,\n    clusterApiUrl,\n    SystemProgram,\n    LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\ntype PhantomRequestMethod =\n    | \"connect\"\n    | \"disconnect\"\n    | \"signTransaction\"\n    | \"signAllTransactions\"\n    | \"signMessage\";\n\ninterface ConnectOpts {\n    onlyIfTrusted: boolean;\n}\n\ninterface PhantomProvider {\n    publicKey: PublicKey | null;\n    isConnected: boolean | null;\n    signTransaction: (transaction: Transaction) => Promise<Transaction>;\n    signAllTransactions: (\n        transactions: Transaction[]\n    ) => Promise<Transaction[]>;\n    signMessage: (\n        message: Uint8Array | string,\n        display?: DisplayEncoding\n    ) => Promise<any>;\n    connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n    disconnect: () => Promise<void>;\n    on: (event: PhantomEvent, handler: (args: any) => void) => void;\n    request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nlet provider: PhantomProvider | undefined;\n\nconst connectPhantom = document.getElementById(\n    \"connect-phantom\"\n) as HTMLButtonElement;\n\nconst anyWindow: any = window;\n\nconst getPhantomAccount = async () => {\n    try {\n        await anyWindow.solana.connect();\n    } catch (err) {\n        // TODO: Show error message\n    }\n};\n\nconst getProvider = async (): Promise<PhantomProvider | undefined> => {\n    if (\"solana\" in window) {\n        const anyWindow: any = window;\n        const provider = anyWindow.solana;\n\n        if (provider.isPhantom) {\n            return provider;\n        }\n    }\n\n    connectPhantom.disabled = true;\n    return;\n};\n\nconst NETWORK = clusterApiUrl(\"devnet\");\n\nconst connection = new Connection(NETWORK);\n\nconst createTransferTransaction = async () => {\n    const to = new PublicKey(\"9ZZoqoTfzMvpzeM719AbDnxdTBGaz2UYK77ZCwb5CQDD\");\n\n    const transaction = new Transaction().add(\n        SystemProgram.transfer({\n            fromPubkey: provider.publicKey,\n            toPubkey: to,\n            lamports: 0.0125 * LAMPORTS_PER_SOL,\n        })\n    );\n\n    transaction.feePayer = provider.publicKey;\n    transaction.recentBlockhash = (\n        await connection.getRecentBlockhash()\n    ).blockhash;\n\n    return transaction;\n};\n\nconnectPhantom.addEventListener(\"click\", async () => {\n    await getPhantomAccount();\n\n    try {\n        const transaction = await createTransferTransaction();\n\n        if (!transaction) {\n            return;\n        }\n\n        const signed = await provider.signTransaction(transaction);\n        const signature = await connection.sendRawTransaction(\n            signed.serialize()\n        );\n        await connection.confirmTransaction(signature);\n    } catch (err) {\n        // TODO: Show error message\n    }\n});\n\nwindow.onload = () => {\n    getProvider()\n        .then((result) => {\n            provider = result;\n        })\n        .catch(() => {\n            // TODO: Show error message\n        });\n};\n"],"names":["provider","connectPhantom","document","getElementById","anyWindow","window","NETWORK","clusterApiUrl","connection","Connection","addEventListener","solana","connect","to","PublicKey","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","publicKey","toPubkey","lamports","LAMPORTS_PER_SOL","feePayer","getRecentBlockhash","recentBlockhash","blockhash","signTransaction","signed","sendRawTransaction","serialize","signature","confirmTransaction","onload","isPhantom","disabled","then","result"],"sourceRoot":""}